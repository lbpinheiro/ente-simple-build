version: '3.8'

services:
  museum:
    image: ghcr.io/ente-io/server:latest
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  postgres:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

  postgres-setup:
    image: postgres:15
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    command: >
      bash -c "
        echo 'Setting up database user and permissions...'
        
        # Create database if it doesn't exist
        psql -h postgres -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = '${POSTGRES_DB}'\" | grep -q 1 || psql -h postgres -U postgres -c \"CREATE DATABASE ${POSTGRES_DB};\"
        
        # Create user if it doesn't exist and grant permissions
        psql -h postgres -U postgres -d ${POSTGRES_DB} -c \"
          DO \$\$
          BEGIN
            IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '${POSTGRES_USER}') THEN
              CREATE USER \"${POSTGRES_USER}\" WITH PASSWORD '${POSTGRES_PASSWORD}';
            END IF;
          END
          \$\$;
          
          GRANT ALL PRIVILEGES ON DATABASE \"${POSTGRES_DB}\" TO \"${POSTGRES_USER}\";
          GRANT ALL PRIVILEGES ON SCHEMA public TO \"${POSTGRES_USER}\";
          GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO \"${POSTGRES_USER}\";
          GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO \"${POSTGRES_USER}\";
          GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO \"${POSTGRES_USER}\";
        \"
        
        echo 'Database setup completed successfully!'
      "
    restart: "no"

  minio:
    image: minio/minio:latest
    ports:
      - "3200:3200"
      - "3201:3201"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      COOLIFY_URL: ${COOLIFY_URL:-}
      COOLIFY_FQDN: ${COOLIFY_FQDN:-}
    command: server /data --address ":3200" --console-address ":3201"
    volumes:
      - minio-data:/data
    restart: unless-stopped
    labels:
      # Deixar o Coolify gerenciar automaticamente
      - "coolify.managed=true"
      - "coolify.type=application"


volumes:
  postgres-data:
  minio-data:
