# documentation: https://ente.io
# slogan: Ente is a fully open source, End to End Encrypted alternative to Google Photos and Apple Photos
# tags: ente,photos,backup,gallery,open,source,end-to-end,encryption
# logo: https://github.com/ente-io/ente/raw/main/web/apps/photos/public/images/global/logo.png
# port: 80

services:
  museum:
    image: ghcr.io/ente-io/server:latest
    environment:
      - SERVICE_FQDN_MUSEUM_80
      - ENTE_DB_HOST=postgres
      - ENTE_DB_PORT=5432
      - ENTE_DB_NAME=${POSTGRES_DB:-ente_db}
      - ENTE_DB_USER=${SERVICE_USER_POSTGRES:-pguser}
      - ENTE_DB_PASSWORD=${SERVICE_PASSWORD_POSTGRES:-2DTjzzKrLl4xpB8n6rpcScG1YflL}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./museum.yaml:/museum.yaml:ro
      - ./data:/data:ro

  # Resolve "localhost:3200" in the museum container to the minio container
  socat:
    image: alpine/socat:latest
    network_mode: service:museum
    depends_on: 
      - museum
    command: "TCP-LISTEN:3200,fork,reuseaddr TCP:minio:3200"

  web:
    image: ghcr.io/ente-io/web:latest
    environment:
      - SERVICE_FQDN_WEB_3000
      - SERVICE_FQDN_WEB_3002
      - ENTE_API_ORIGIN=${SERVICE_FQDN_MUSEUM}
      - ENTE_ALBUMS_ORIGIN=${SERVICE_FQDN_WEB_3002}

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=${SERVICE_USER_POSTGRES:-pguser}
      - POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES:-2DTjzzKrLl4xpB8n6rpcScG1YflL}
      - POSTGRES_DB=${POSTGRES_DB:-ente_db}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 40s
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data

  minio:
    image: minio/minio:latest
    environment:
      - SERVICE_FQDN_MINIO_3201
      - MINIO_ROOT_USER=${SERVICE_USER_MINIO:-minio-user-X569veZN}
      - MINIO_ROOT_PASSWORD=${SERVICE_PASSWORD_MINIO:-pMpc3+De6+/bFADNOQ/KnG43eYdf}
      - MINIO_BROWSER_REDIRECT_URL=${SERVICE_FQDN_MINIO_3201}
    command: server /data --address ":3200" --console-address ":3201"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3200/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO bucket setup
  minio-setup:
    image: minio/mc:latest
    restart: "no"
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: |
      /bin/sh -c "
      until /usr/bin/mc alias set minio-local http://minio:3200 \$${SERVICE_USER_MINIO:-minio-user-X569veZN} \$${SERVICE_PASSWORD_MINIO:-pMpc3+De6+/bFADNOQ/KnG43eYdf}; do
        echo 'Waiting for MinIO...'
        sleep 5
      done
      echo 'MinIO is ready. Creating buckets...'
      /usr/bin/mc mb minio-local/b2-eu-cen --ignore-existing
      /usr/bin/mc mb minio-local/wasabi-eu-central-2-v3 --ignore-existing
      /usr/bin/mc mb minio-local/scw-eu-fr-v3 --ignore-existing
      echo 'Setting bucket policies...'
      /usr/bin/mc anonymous set none minio-local/b2-eu-cen
      /usr/bin/mc anonymous set none minio-local/wasabi-eu-central-2-v3
      /usr/bin/mc anonymous set none minio-local/scw-eu-fr-v3
      echo 'Buckets created and configured successfully'
      "

volumes:
  postgres-data:
  minio-data:

